from  abc import  ABCMeta, abstractmethod
from  random import  randint, randrange

class Fighter(object,metaclass = ABCMeta):

    __slots__ = ('_name', '_hp')                #限定对象只能绑定姓名和血量

    def __init__(self, name, hp):               #初始化
        self._name = name
        self._hp = hp

    @property
    def name(self):
        return  self._name

    @property
    def hp(self):
        return self._hp

    @hp.setter
    def hp(self,hp):
        self._hp = hp if hp >= 0 else 0

    @property
    def alive(self):                           #判定血量是否大于0
        return self._hp > 0

    @abstractmethod
    def attack(self, other):
        pass

class Ultraman(Fighter):                                #继承Fighter属性

    __slots__ = ('_name', '_hp','_mp')

    def __init__(self, name, hp, mp):
        super().__init__(name,hp)                       #调用父类属性
        self._mp = mp

    def attack(self, other):
        other.hp -= randint(15, 25)                     #设定攻击力

    def huge_attack(self,other):                        #必杀
        if self._mp >= 50:                              #法力值高于50可以使用必杀
            self._mp -= 50                              #扣除50点法力
            injury = other.hp * 3//4                    #伤害为3/4血量
            injury = injury if injury >= 50 else 50     #保证必杀最低伤害为50
            other.hp -= injury                          #对手减血
            return  True
        else:
            self.attack(other)                          #法力不足50，使用普通攻击
            return  False

    def magic_attack(self, others):
        if self._mp >= 20:
            self._mp -= 20
            for temp in others:
                if temp.alive:
                    temp.hp -= randint(10, 15)
            return  True
        else:
            return False

    def resume(self):                                   #恢复法力
        incr_point = randint(1,10)                      #设定恢复值
        self._mp += incr_point
        return incr_point

    def __str__(self):
        return '—————— 英雄%s ——————\n' % self._name + \
            '生命值：%d\n' % self._hp + \
            '魔法值：%d\n' % self._mp

class Monster(Fighter):                                #继承Fighter属性

    __slots__ = ('_name', '_hp')

    def attack(self, other):
        other.hp -= randint(10, 20)

    def __str__(self):
        return '—————— 怪兽%s ——————\n' % self._name + \
            '生命值：%d\n' % self._hp

def is_any_alive(monsters):
    for monster in monsters:
        if monster.alive > 0:                        #判断是否有怪兽血量大于0
            return True
    return  False

def select_alive_one(monsters):
    monsters_len = len(monsters)                     #计算怪兽数量
    while True:
        index = randrange(monsters_len)              #随机选取下标
        monster = monsters[index]
        if monster.alive > 0:                        #判断这只怪兽是否死亡
            return monster

def display_info(ultraman, monsters):
    print(ultraman)
    for monster in monsters:
        print(monster, end='')

def main():
    u = Ultraman('妙说', 500, 100)
    m1 = Monster('亚瑟',200)
    m2 = Monster('老夫子', 500)
    m3 = Monster('程咬金', 700)
    ms = [m1, m2, m3]
    fight_round = 1
    while u.alive and is_any_alive(ms):
        print('—————————— 第%d回合 ——————————' % fight_round)
        m = select_alive_one(ms)
        skill = randint(1, 10)
        if skill <= 6:                                                  #基础攻击60%概率
            print('%s使用普通攻击打了%s.' % (u.name, m.name))
            u.attack(m)
            print('%s的魔法值恢复了%d点.' % (u.name, u.resume()))
        elif skill <= 9:                                                #魔法攻击30%概率
            if u.magic_attack(ms):
                print('%s使用了魔法攻击.' % u.name)
            else:
                print('%s使用魔法失败.' % u.name)
        else:
            if u.huge_attack(m):                                        #必杀10%概率
                print('%s使用究极必杀技虐了%s.' % (u.name, m.name))
            else:
                print('%s使用普通攻击打了%s.' % (u.name, m.name))
                print('%s的魔法值恢复了%d点.' % (u.name, u.resume()))
        if m.alive > 0:
            print('%s回击了%s.' % (m.name, u.name))
            m.attack(u)
        display_info(u,ms)
        fight_round += 1
    print('\n========战斗结束!========\n')
    if u.alive > 0:
        print('英雄%s胜利!' % u.name)
    else:
        print('怪兽胜利！')

if __name__ == '__main__':
    main()
