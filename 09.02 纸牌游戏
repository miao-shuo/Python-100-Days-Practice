import  random

class Card(object):                                             #一张牌

    def __init__(self, suite, face):                            #初始化花色，牌面两个属性
        self._suite = suite
        self._face = face

    @property
    def face(self):
        return self._face

    @property
    def suite(self):
        return self._suite

    def __str__(self):                                        #替换特殊牌面
        if self._face == 1:
            face_str = 'A'                                    #1替换成A
        elif self._face == 11:
            face_str = 'J'                                    #11替换成J
        elif self._face == 12:
            face_str = 'Q'                                    #12替换成Q
        elif self._face == 13:
            face_str = 'K'                                    #13替换成K
        else:
            face_str = str(self._face)                        #其他牌面保持原数
        return '%s%s' % (self._suite, face_str)               #最终返回花色+牌面

    def __repr__(self):
        return self.__str__()

class Poker(object):                                          #一副牌

    def __init__(self):
        self._cards = [Card(suite, face)                      #得到四种花色，十三种牌面
                       for suite in '♠♥♣♦'                    #遍历四种花色
                       for face in range(1,14)]               #遍历牌面
        self._current = 0                                     #计数器归零

    @property
    def cards(self):
        return  self._cards

    def shuffle(self):
        self._current = 0
        random.shuffle(self._cards)                          #随机排序

    @property
    def next(self):
        card = self._cards[self._current]                    #发牌
        self._current += 1                                   #计数器+1
        return card                                          #得到一张牌

    @property
    def has_next(self):
        return self._current < len(self._cards)             #计算牌库里是否还有牌

class Player(object):

    def __init__(self, name):
        self._name = name
        self._cards_on_hand = []                             #为手牌建立空列表

    @property
    def name(self):
        return self._name

    @property
    def cards_on_hand(self):
        return self._cards_on_hand

    def get(self, card):
        self._cards_on_hand.append(card)                    #向手牌列表中发牌

    def arrange(self, card_key):
        self._cards_on_hand.sort(key=card_key)              #整理手牌

def get_key(card):                                          #定义整理顺序
    return (card.suite, card.face)

def main():
    p = Poker()                                             #继承Poker属性
    p.shuffle()                                             #洗牌
    players = [Player('东邪'), Player('西毒'),
               Player('南帝'), Player('北丐')]               #建立玩家列表

    for _ in range(13):                                     #发13轮
        for player in players:
            player.get(p.next)                              #将发牌加入到手牌中

    for player in players:
        print(player.name + ':', end='')                    #打印玩家名不换行
        player.arrange(get_key)                             #整理手牌
        print(player.cards_on_hand,)                        #打印手牌

if __name__ == '__main__':
    main()
